from collections import defaultdict
import random

nodes_set = set()
edges_set = set()
edges_directed = set()
node_neighbors_dict = {}

num_initial_spreaders = 100
elected_spreaders = []
longest_shortest_path = 14

with open('sim.txt') as inputfile:
	for i, line in enumerate(inputfile):
		nodes = line.strip().split()
		nodes.sort()
		for node in nodes:
			nodes_set.add(node)
		edges_set.add(tuple(nodes))

# with open('web-BerkStan.txt') as inputfile:
# 	for i, line in enumerate(inputfile):
# 		if i >= 4:
# 			nodes = line.strip().split()
# 			nodes.sort()
# 			for node in nodes:
# 				nodes_set.add(node)
# 			edges_set.add(tuple(nodes))
			# if tuple(nodes) in edges_directed:
			# 	edges_set.add(tuple(nodes))
			# 	# edges_directed.remove(tuple(nodes))
			# else:
			# 	edges_directed.add(tuple(nodes))

num_nodes = len(nodes_set) 	#Condmat: 23133  BerkStan: 685230
print(num_nodes) #1005
num_directed_edges = len(edges_set)
print(num_directed_edges) #16706
# num_directed_edges = len(edges_directed)	#Condmat 93497	 BerkStan (directed): 6649470 BerkStan (undirected): 951125
# print(num_directed_edges)

neighbors_dict = defaultdict(set)
for (node_0, node_1) in edges_set:
	neighbors_dict[node_0].add(node_1)
	neighbors_dict[node_1].add(node_0)

# average degree of network
average_degree = 0
for node, neighbors in neighbors_dict.items():
	average_degree += len(neighbors)
average_degree /= num_nodes
print("average degree of the graph is :" + str(average_degree))

def vote_and_elect(node_voting_info):
	node_with_max_votes = ""
	max_votes = 0
	for node, voting_info in node_voting_info.items():
		neighbors = neighbors_dict[node]
		num_votes_received = 0
		for neighbor in neighbors:
			num_votes_received += node_voting_info[neighbor][1]
		if num_votes_received > max_votes:
			max_votes = num_votes_received
			node_with_max_votes = node
		node_voting_info[node] = (num_votes_received, node_voting_info[node][1])
	return node_with_max_votes

def update_voting_ability(elected_node, neighbors_dict, node_voting_info, average_degree):
	for neighbor in neighbors_dict[elected_node]:
		new_voting_ability = node_voting_info[neighbor][1] - 1/average_degree
		if new_voting_ability >= 0:
			node_voting_info[neighbor] = (node_voting_info[neighbor][0], new_voting_ability)
		else:
			node_voting_info[neighbor] = (node_voting_info[neighbor][0], 0)

#initialize the algorithm
# node_voting_info = {}
# for node in nodes_set:
# 	node_voting_info[node] = (0, 1) # (number of votes received, voting power)
# while (len(elected_spreaders) < num_initial_spreaders):
# 	elected_node = vote_and_elect(node_voting_info)
# 	# print(elected_node)
# 	if elected_node not in elected_spreaders:
# 		elected_spreaders.append(elected_node)
# 	node_voting_info[elected_node] = (0, 0)
# 	update_voting_ability(elected_node, neighbors_dict, node_voting_info, average_degree)
# print(elected_spreaders)

cond_mat_elected_spreaders_200 = ['73647', '52658', '78667', '97632', '101425', '97788', '95372', '22987', '22757', '91392', '83259', '46269', '101355', '15439', '101191', '26075', '84209', '46016', '11063', '29380', '8536', '9991', '31762', '56672', '26750', '55210', '95940', '905', '107009', '73122', '61271', '102365', '57070', '71461', '12915', '485', '33410', '2716', '15345', '1895', '83197', '88363', '72331', '14096', '96395', '35010', '37206', '106876', '35171', '7399', '17933', '15113', '96866', '80915', '57340', '52364', '53994', '90690', '18654', '50541', '85266', '27892', '2962', '99977', '41266', '26130', '101743', '36740', '62113', '92360', '64278', '62327', '9533', '30365', '83824', '38468', '97009', '83069', '73252', '91541', '60662', '34845', '74055', '6185', '103420', '23127', '28953', '36382', '60251', '69685', '58706', '48139', '23548', '53906', '7204', '47468', '51336', '88748', '35688', '72730', '31208', '57036', '60057', '53880', '99870', '1764', '21672', '45942', '57478', '34770', '94304', '71222', '8350', '23411', '83037', '79087', '48940', '101472', '97347', '21181', '2451', '24840', '56414', '86764', '46144', '20562', '74869', '30488', '48875', '93813', '28121', '74250', '43077', '55406', '77524', '58293', '66460', '80859', '5215', '83876', '32554', '87299', '52287', '53624', '8100', '36435', '85840', '9489', '28575', '79387', '72044', '49235', '11174', '37250', '49031', '60432', '45769', '46805', '66908', '59595', '86808', '14023', '41240', '98676', '61105', '89340', '88071', '10099', '34346', '8810', '100439', '32332', '52098', '52472', '22461', '96245', '93764', '42478', '85796', '24254', '55966', '1034', '25735', '40747', '81509', '34703', '26002', '16963', '46066', '62943', '98553', '44960', '100587', '72079', '45251', '79496', '83984', '48626', '90477', '45051']
berkstan_mat_elected_spreaders_200 = ['438238', '210376', '272919', '86237', '601656', '210305', '571447', '571448', '623254', '319209', '479054', '417965', '544858', '401873', '477985', '158750', '502214', '388649', '657843', '54008', '462728', '501481', '657219', '388546', '270625', '210142', '631045', '380036', '458002', '48633', '428428', '397429', '109863', '507147', '486303', '663981', '680968', '280874', '257183', '652424', '53386', '106615', '434168', '51837', '678148', '435614', '52855', '652047', '257139', '536676', '513542', '186755', '272509', '538396', '164237', '422953', '442904', '496050', '668472', '511918', '491069', '422961', '665513', '631048', '129159', '331840', '378760', '257305', '375375', '551025', '634081', '65334', '127554', '422971', '400189', '203336', '641479', '129500', '601182', '372775', '210139', '549479', '331645', '158099', '145528', '101735', '207274', '384684', '150862', '641752', '402659', '119422', '383732', '475508', '427185', '428414', '199892', '254913', '355227', '125476', '383095', '542082', '406550', '148061', '153347', '118188', '146231', '151515', '433180', '673942', '409270', '210983', '317952', '637476', '496990', '651634', '142527', '469473', '661771', '169096', '443543', '50420', '204080', '406212', '143567', '128041', '142900', '642948', '383124', '384621', '427786', '427814', '168272', '319210', '494374', '49460', '398418', '123864', '451111', '653080', '406559', '383741', '499304', '640090', '117856', '40', '372332', '48634', '45327', '331807', '331467', '629221', '656104', '331718', '644462', '45362', '259982', '523680', '548797', '451020', '319672', '167593', '462163', '319599', '186968', '672762', '319763', '579915', '319416', '645239', '610092', '61461', '422996', '356987', '550130', '644712', '149417', '49553', '152533', '154704', '354425', '386597', '147253', '608824', '476659', '652687', '542269', '666763', '319735', '644639', '528617', '102397', '514788', '611653', '648914', '651262', '514542', '442633', '670081', '515037']
eu_elected_spreaders_200 = ['160', '121', '86', '5', '377', '13', '84', '211', '64', '971', '498', '82', '533', '411', '44', '129', '96', '333', '65', '165', '7', '301', '63', '74', '107', '2', '295', '21', '269', '820', '592', '549', '340', '353', '546', '401', '27', '114', '231', '12', '209', '414', '141', '69', '258', '87', '509', '440', '290', '412', '375', '316', '191', '14', '206', '115', '222', '366', '170', '234', '560', '405', '544', '106', '543', '92', '376', '569', '285', '243', '189', '52', '435', '495', '24', '213', '462', '723', '218', '137', '327', '306', '232', '322', '163', '466', '242', '523', '335', '358', '23', '409', '614', '140', '577', '516', '6', '417', '506', '88', '18', '350', '452', '936', '62', '325', '57', '199', '128', '230', '521', '38', '329', '299', '124', '263', '380', '215', '381', '641', '846', '777', '145', '238', '504', '166', '633', '788', '691', '393', '675', '684', '658', '670', '630', '55', '731', '653', '157', '712', '703', '635', '408', '772', '808', '737', '798', '748', '611', '660', '72', '711', '321', '746', '648', '564', '732', '580', '744', '438', '184', '424', '887', '93', '159', '330', '483', '499', '113', '273', '958', '481', '461', '913', '326', '425', '185', '968', '434', '28', '567', '851', '445', '314', '359', '742', '666', '437', '531', '721', '41', '631', '338', '398', '795', '418', '724', '221', '181', '378']
ga_elected_spreaders_200 = ['21012', '21281', '15244', '12365', '22691', '13929', '13801', '14265', '14157', '22601', '2654', '2710', '4364', '6264', '9572', '3651', '23038', '449', '9639', '10762', '14599', '7689', '9017', '1488', '5052', '13142', '18866', '23614', '6583', '19865', '4952', '7650', '1217', '7007', '7307', '20511', '9124', '23382', '1000', '543', '9471', '6823', '20373', '22457', '15066', '24814', '5901', '14924', '24330', '3501', '9710', '14746', '15108', '24057', '10711', '15300', '24924', '18208', '24559', '11372', '18487', '11275', '22177', '615', '25034', '4241', '593', '1023', '21508', '8116', '6512', '22423', '2072', '3113', '20765', '24696', '8823', '11696', '2042', '24293', '11400', '9184', '5346', '23836', '4416', '12545', '11557', '7350', '26038', '3843', '4575', '21994', '2115', '17626', '339', '11861', '13520', '16469', '19489', '18122', '3716', '24371', '17038', '676', '8254', '12842', '3839', '5107', '13556', '16258', '11293', '11077', '17501', '13008', '10791', '3345', '22527', '6482', '22555', '12927', '21075', '9629', '23114', '6774', '4550', '24833', '16482', '3811', '9591', '10096', '21125', '2846', '6700', '12212', '17113', '13346', '17075', '6154', '10801', '12720', '6337', '24781', '23134', '20328', '12187', '15552', '24097', '10532', '6218', '5385', '12587', '18365', '18314', '14952', '24412', '17379', '12406', '13813', '19297', '18215', '6023', '25286', '15144', '18030', '14337', '482', '491', '12286', '14534', '10055', '12491', '16368', '18579', '8612', '10039', '11733', '17228', '14834', '11712', '2287', '3547', '13859', '6350', '14149', '16154', '22366', '4624', '1116', '3909', '17612', '22046', '8851', '14690', '3386', '7045', '20478', '9829', '3618', '7712', '19992', '25931', '21089', '16056', '24009', '24385', '7154', '1896', '25540', '1765', '12551', '1981', '8177', '24439', '24841', '8701', '3743', '25006', '8471', '10310', '5695', '19340', '22483', '12599', '18676', '811', '4814', '5078', '6857', '12687', '3032', '22574', '13352', '18256', '20924', '21220', '23708', '22815', '19781', '4164', '21910', '5209', '11964', '16717', '25582', '24489', '1028', '2912', '16006', '4013', '8768', '6408', '14864', '21943', '3310', '23529', '6735', '8669', '6427', '24970', '8349', '12235', '10338', '9606', '15568', '19936', '15372', '16543', '1545', '9037', '5597', '7188', '10130', '7125', '8408', '19204', '13966', '23665', '5240', '16039', '23986', '1044', '9755', '17172', '26065', '5172', '23503', '11318', '9306', '10588', '22415', '20100', '20940', '3765', '122', '17359', '10456', '5712', '8916', '12472', '22074', '8666', '13384', '19697', '1711', '178', '19423', '25902', '18940', '6804', '8045', '20567', '1736', '4896', '24568', '3804', '1149', '7911', '4834', '4673', '65', '21344', '26019', '9579', '17935', '26058', '5156', '369', '3377', '9715', '3872', '2054', '24713', '23084', '12135', '25043', '5225', '7194', '5425', '7479', '3516', '15695', '6638', '13955', '135', '12884', '13190', '21608', '18088', '22051', '16310', '15357', '15395', '24877', '17721', '18408', '13404', '7087', '20879', '10600', '23485', '21450', '10923', '6503', '14123', '13659', '16931', '25080', '22265', '10871', '5287', '14067', '12101', '4275', '18592', '1817', '11746', '23896', '14872', '4442', '5993', '7504', '21466', '24240', '12980', '22876', '18065', '22951', '25435', '5738', '6666', '23939', '19140', '9482', '8335', '15455', '3052', '10983', '6280', '13276', '13702']# Average % of infected nodes: 0.40668525483076123 (cond_mat_elected_spreaders_200[:100])
sim_elected_spreaders_200 = ['729', '735', '889', '483', '675', '531', '775', '865', '538', '14', '669', '647', '873', '550', '169', '546', '829', '109', '608', '557', '768', '923', '276', '279', '853', '324', '145', '876', '513', '921', '719', '937', '950', '558', '520', '504', '196', '231', '827', '476', '560', '866', '114', '257', '566', '358', '693', '767', '58', '338', '328', '149', '322', '946', '64', '494', '381', '858', '296', '960', '590', '170', '776', '975', '707', '833', '11', '221', '90', '255', '742', '505', '808', '522', '779', '575', '187', '246', '883', '612', '350', '174', '219', '645', '273', '521', '250', '771', '961', '824', '207', '979', '730', '493', '345', '108', '206', '275', '737', '959']
# Average % of infected nodes: 0.4986551679419015 (cond_mat_elected_spreaders_200)
###################################

# def infection(neighbors_dict, elected_spreaders, infected_bound = num_nodes*0.5, infection_rate = 0.5):
# 	infected_set = set(elected_spreaders)
# 	newly_infected_set = set()
# 	t = 0
# 	while len(infected_set) < infected_bound:
# 		for infected_node in infected_set:
# 			neighbor = random.choice(list(neighbors_dict[infected_node]))
# 			if random.uniform(0,1) <= infection_rate:
# 				newly_infected_set.add(neighbor)
# 		t+=1
# 		infected_set = infected_set.union(newly_infected_set)
# 	return t

# run infection
# avg = 0
# for i in range(0,10):
# 	avg+=infection(neighbors_dict, elected_spreaders)
# print("Average # of time steps until convergence: " + str(avg/10))

def infection(neighbors_dict, elected_spreaders, fixed_time_steps = 35, infection_rate = 0.5):
	infected_set = set(elected_spreaders)
	newly_infected_set = set()
	t = 0
	while t < fixed_time_steps:
		for infected_node in infected_set:
			neighbor = random.choice(list(neighbors_dict[infected_node]))
			if random.uniform(0,1) <= infection_rate:
				newly_infected_set.add(neighbor)
		t += 1
		infected_set = infected_set.union(newly_infected_set)
	return len(infected_set) / num_nodes

# run infection
test_spreaders_set = [sim_elected_spreaders_200[:1], sim_elected_spreaders_200[:2], sim_elected_spreaders_200[:3], sim_elected_spreaders_200[:4], sim_elected_spreaders_200[:5], sim_elected_spreaders_200[:6], sim_elected_spreaders_200[:7], sim_elected_spreaders_200[:8], sim_elected_spreaders_200[:9], sim_elected_spreaders_200[:10], sim_elected_spreaders_200[:11], sim_elected_spreaders_200[:12], sim_elected_spreaders_200[:13], sim_elected_spreaders_200[:14], sim_elected_spreaders_200[:15], sim_elected_spreaders_200[:16], sim_elected_spreaders_200[:17], sim_elected_spreaders_200[:18], sim_elected_spreaders_200[:19], sim_elected_spreaders_200[:20], sim_elected_spreaders_200[:30], sim_elected_spreaders_200[:40], sim_elected_spreaders_200[:50], sim_elected_spreaders_200[:60], sim_elected_spreaders_200[:70], sim_elected_spreaders_200[:80], sim_elected_spreaders_200[:90], sim_elected_spreaders_200[:100]]
for test in test_spreaders_set:
	avg = 0
	print("number of initial is " + str(len(test)))
	for i in range(0,20):
		avg+=infection(neighbors_dict, test)
	print("Average % of infected nodes: " + str(avg/20))











